{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7fe89f3d_384c2841",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1037775
      },
      "writtenOn": "2024-02-23T13:26:21Z",
      "side": 1,
      "message": "Super cool idea! I\u0027m looking forward to the event.",
      "revId": "9f7c08c4834d2c655595cb588a72a46675686a2a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4baee593_f3f2a3d0",
        "filename": "MVP.md",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1037775
      },
      "writtenOn": "2024-02-23T13:26:21Z",
      "side": 1,
      "message": "Does the team have access to any example data from staging or production environments? Some real-world data (even if it is just for a subset of these measures) would be super useful for training/evaluating the decision models.",
      "revId": "9f7c08c4834d2c655595cb588a72a46675686a2a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e675b55a_027bfcb6",
        "filename": "MVP.md",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-23T13:56:55Z",
      "side": 1,
      "message": "Yes, we do have access to lots of existing historical data on GerritHub, with the repository names redacted of course.",
      "parentUuid": "4baee593_f3f2a3d0",
      "revId": "9f7c08c4834d2c655595cb588a72a46675686a2a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a42c8fa_f727f424",
        "filename": "MVP.md",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1037775
      },
      "writtenOn": "2024-02-23T13:26:21Z",
      "side": 1,
      "message": "We will likely need to think about reward/penalty functions to feedback to the learner. Phrased another way, how will we teach the learner that a decision it took had a positive or negative impact? Any thoughts about this?",
      "revId": "9f7c08c4834d2c655595cb588a72a46675686a2a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c9563e8_0e8e4ba5",
        "filename": "MVP.md",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-23T13:56:55Z",
      "side": 1,
      "message": "Yes, indeed. I was thinking about this as a similar scenario of the restocking problem:\n- If you restock a shop, you spend money for buying more products and for renting more space in your warehouse (negative penalty)\n- The restock increases your availability of products and your sales (positive revenue)\n\nHence the overall reward function is revenue - penalty.\n\nSimilarly all the actions on the repository problem:\n- If you run an operation (GC, empty directories removal, bitmap generation) you spend CPU time and lower the overall throughput of the machine (negative penalty for running the action)\n- If your repository has a better filesystem organisation, you spend less time in the different Git protocol phases and increase throughput (positive throughput increase)\n\nHence the overall reward function is throughput increase - penalty of running the action.",
      "parentUuid": "1a42c8fa_f727f424",
      "revId": "9f7c08c4834d2c655595cb588a72a46675686a2a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "599009bb_118670cd",
        "filename": "MVP.md",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1037775
      },
      "writtenOn": "2024-02-23T13:26:21Z",
      "side": 1,
      "message": "I really like the RL idea! In addition, we can experiment with simple rule-based approaches. For example, one approach that jumps to mind is to use [control charts](https://en.wikipedia.org/wiki/Control_chart), which simply take decisions when tracked measures cross critical thresholds. In the worst case, such a rule-based approach would serve as a baseline to which the RL could be compared.",
      "revId": "9f7c08c4834d2c655595cb588a72a46675686a2a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c70991f7_c54f02db",
        "filename": "MVP.md",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-23T13:56:55Z",
      "side": 1,
      "message": "\u003e I really like the RL idea! In addition, we can experiment with simple rule-based approaches. For example, one approach that jumps to mind is to use [control charts](https://en.wikipedia.org/wiki/Control_chart), which simply take decisions when tracked measures cross critical thresholds. In the worst case, such a rule-based approach would serve as a baseline to which the RL could be compared.\n\nExactly, the traditional rule-approach we know it works (Git uses a simple threshold-based decision to run GC automatically); however, we have seen (and paid with our blood in production fires) that the simple rule-based approach isn\u0027t flexible, adaptable and does not take all metrics into consideration.\n\nExample: the auto-gc mechanism may decide to start a full GC of a mono-repo (*very expensive indeed* !) in the middle of the production peak traffic, causing a global outage. Even tough the rule was applied, it did not take into consideration other factors and most importantly cannot self-evolve based on its own failings.",
      "parentUuid": "599009bb_118670cd",
      "revId": "9f7c08c4834d2c655595cb588a72a46675686a2a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}